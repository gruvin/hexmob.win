import React from 'react'
import { 
    Container,
    Row, Col,
    Card,
    Form,
    ProgressBar,
    Accordion
} from 'react-bootstrap'
import './Lobby.scss'
import HEX from './hex_contract'
import { BigNumber } from 'bignumber.js'
import { CryptoVal, BurgerHeading, VoodooButton } from './Widgets' 
import BitSet from 'bitset'
import Timer from 'react-compound-timer'
import crypto from 'crypto'

const debug = require('debug')('Lobby')

class Lobby extends React.Component {
    constructor(props) {
        super(props)
        this.eventLog = { }
        this.state = {
            historyDataReady: false,
            error: null,
            dailyDataCount: 0,
            lobbyData: null, // no mutations
            lobbyDataUI: null, // sorted for UI display
            pastEntries: { },
            entryETH: '', // form input value
            todayAvailableHEX: '---',
            todayPendingETH: '---',
            HEXperETH: '---',
            todayYourHEXPending: '---',
            todayYourEntriesRawTotal: '---',
            unmintedEntries: [ ],
            lobbySortKey: { keyField: '', dir: -1 },
            walletETHBalance: new BigNumber(0)
        }
    }

    addToEventLog = (entry) => {
        const hash = crypto.createHash('sha1').update(JSON.stringify(entry)).digest('hex')
        if (this.eventLog[hash]) return false
        this.eventLog[hash] = entry
        return true
    }

    unsubscribeEvents = () => {
        try {
            this.web3.eth.clearSubscriptions()
        } catch(e) {}
    }
    
    handleSubscriptionError = (e, r) => {
        debug("subscription error: ", e)
    }
    
    subscribeEvents = () => {
        this.props.contract.events.XfLobbyEnter( {filter:{memberAddr:this.props.wallet.address}}, async (e, r) => {
            if (e) { 
                debug('ERR: events.XfLobbyEnter:', e) 
                return
            }
            if (r && !this.addToEventLog(r)) return
            this.getToday()
        })
        .on('connected', (id) => debug('subbed: XfLobbyEnter:', id))
        .on('error', this.handleSubscriptionError)
    }
    
    getDayEntries = (day, address) => {
        const { contract } = this.props
        return new Promise((resolveEntries, reject) => {
            contract.methods.xfLobbyMembers(day, address).call()
            .then(entryIndexes => {
                const { headIndex, tailIndex } = entryIndexes

                // let's NOT use Promise.all ... (reasons)
                var entries = [ ]
                if (Number(tailIndex) === 0) return resolveEntries(entries)
                for (let entryIndex = 0; entryIndex < tailIndex; entryIndex++) {
                    const entryId = BigNumber(day).times(BigNumber(2).pow(40)).plus(entryIndex).toString()
                    // eslint-disable-next-line
                    contract.methods.xfLobbyEntry(address, entryId).call({from: address}, (err, entry) => {
                        let newEntry = [ ]
                        if (err) {
                            debug('getDayEntries:: WARNING: day %d, entryId:%s : %s', day, entryId, err)
                        } else {
                            newEntry = {
                                rawAmount: BigNumber(entry.rawAmount),
                                referrerAddr: entry.referrerAddr,
                            }
                        }
                        entries = entries.concat(newEntry)
                        if (entries.length === Number(tailIndex)) {
                            if (day < contract.Data.currentDay) {
                                if (headIndex <= entryIndex) {
                                    this.setState({ 
                                        unmintedEntries: this.state.unmintedEntries.concat({ day, entries})
                                    })
                                }
                            }
                            resolveEntries(entries)
                        }
                    })
                }
            })
            .catch(e => debug('getDayEntries:: ERROR: ', e))
       })
    }

    calcEntryTotals = (entries, availableHEX=null, totalETH=null) => {
        let rawEntriesTotal = BigNumber(0)
        let entriesTotal = BigNumber(0)
        let mintedHEXTotal = BigNumber(0)
        let potentialHEXTotal = BigNumber(0)
        entries && entries.forEach(entry => { 
            let amountETH = entry.rawAmount
            rawEntriesTotal = rawEntriesTotal.plus(amountETH)
            if (entry.referrerAddr.slice(0, 2) === '0x') {
                amountETH = amountETH.times(1.10)
                if (entry.referrerAddr.toLowerCase() === this.props.wallet.address.toLowerCase())
                    amountETH = amountETH.times(1.20) // clever person in the house! :p
            }
            entriesTotal = entriesTotal.plus(amountETH)
            if (entry.mintedHEX) mintedHEXTotal = mintedHEXTotal.plus(entry.mintedHEX)
        })
        if (availableHEX !== null && totalETH !== null) {
            potentialHEXTotal = entriesTotal.times(availableHEX).idiv(totalETH)
        }
        return {
            potentialHEXTotal,
            mintedHEXTotal,
            rawEntriesTotal,
            entriesTotal
        }
    }

    getToday = () => {
        const { contract, wallet } = this.props
        const { currentDay } = this.props.contract.Data
        Promise.all([
            contract.methods.xfLobby(currentDay).call(),            // [0] global ETH entered today (total pending)
            this.getDayEntries(currentDay, wallet.address),         // [1] our ETH entries for current day (total no. pending)
        ]).then(results => {
            const todayPendingETH  = BigNumber(results[0])
            const todayYourEntries = results[1]
            const totalUnclaimedSatoshis = contract.Data.globals.claimStats.unclaimedSatoshisTotal
            const todayAvailableHEX = totalUnclaimedSatoshis.div(350).times(HEX.HEARTS_PER_SATOSHI) 
            const { 
                rawEntriesTotal:todayYourEntriesRawTotal, 
                entriesTotal:todayYourEntriesTotal
            } = this.calcEntryTotals(todayYourEntries)
            const HEXperETH = todayAvailableHEX.div(todayPendingETH.div(1e18))
            const todayYourHEXPending = todayYourEntriesTotal.div(todayPendingETH).times(todayAvailableHEX)
    
            this.setState({
                todayPendingETH,
                todayAvailableHEX,
                HEXperETH: HEXperETH,
                todayYourHEXPending,
                todayYourEntriesRawTotal
            })
        })
        .catch(e => debug('getToday:: ERROR: ', e))
    }

    getPastLobbyEntries = () => {
        /*  returns array of objects <= [ 
                { 
                    <day>: [ 
                        {
                            rawAmount<BigNumber>,
                            referrerAddr<BigNumber>,
                            mintedHEX<BigNumber>
                        }
                    ]
                } 
            ]
        */
        return new Promise((resolvePastEntries, reject) => {
            const { contract, wallet } = this.props
            let entries = { }
            contract.getPastEvents('XfLobbyEnter',{ 
                fromBlock: 'earliest', 
                filter: { memberAddr: wallet.address }
            }).then(results => {
                results.forEach(d => {
                    const r = d.returnValues
                    const day = BigNumber(r.entryId).idiv(BigNumber(2).pow(40)).toString()
                    const entryNum = BigNumber(r.entryId).mod(BigNumber(2).pow(40)).toNumber()
                    const entriesCopy = { ...entries }
                    const dayEntriesCopy = entriesCopy[day] ? [ ...entriesCopy[day] ] : [ ]
                    dayEntriesCopy[entryNum] = { 
                        rawAmount: BigNumber(r.data0).idiv(BigNumber(2).pow(40)),
                        referrerAddr: r.referrerAddr 
                    }
                    entriesCopy[day] = dayEntriesCopy
                    entries = entriesCopy 
                })
                contract.getPastEvents('XfLobbyExit',{ 
                    fromBlock: 'earliest', 
                    filter: { memberAddr: wallet.address }
                }).then(results => {
                    results.forEach(d => {
                        const r = d.returnValues
                        const day = BigNumber(r.entryId).idiv(BigNumber(2).pow(40)).toString()
                        const entryNum = BigNumber(r.entryId).mod(BigNumber(2).pow(40)).toNumber()
                        const entriesCopy = { ...entries }
                        let dayEntriesCopy = entriesCopy[day] ? [ ...entriesCopy[day] ] : [ ]
                        dayEntriesCopy[entryNum].mintedHEX = BigNumber(r.data0).idiv(BigNumber(2).pow(40))
                        entriesCopy[day] = dayEntriesCopy
                        entries = entriesCopy
                    })
                    resolvePastEntries(entries)
                })
            })
        })
    }

    getHistory = () => {
        const { contract, wallet } = this.props
        const dailyDataCount  = Math.min(HEX.CLAIM_PHASE_END_DAY, contract.Data.globals.dailyDataCount.toNumber())
        if (!wallet.address || wallet.address === '') return debug('Lobby::address invalid')
        Promise.all([
            // contract.methods.dailyDataRange(0, dailyDataCount).call(),  // [0] for unclaimedSatoshisTotal from each day in range
            contract.methods.xfLobbyRange(0, dailyDataCount).call(),    // [1] total ETH from each day in range
            this.getPastLobbyEntries(),                                 // [2] lobby entries history from XfLobbyEnter/Exit event log
            contract.methods.xfLobbyPendingDays(wallet.address).call(), // [3] bit vector of days; 1 == we have entires that day
        ]).then(r => {
            // Apple's iOS NSSURLSession Websocket 'feature' cannot handle the size of dailyDataRange's output
            // Since this data will never change, this ugly hack hardcodes the data here in app, rather than getting
            // it from the block chain. (It only affects users who participated in the one-off adoption amplfier phase.) 
            const rs = [  
                BigNumber('40065950305961564500681460467248661245013514980237852633518'),
                BigNumber('40038475104990981454085086166161090393574062643937309756638'),
                BigNumber('40016689070375964904457532005706307127944502360898022974553'),
                BigNumber('40008593557113001007121126195076018027842322718873461139483'),
                BigNumber('40004857644701429270510726478026181159793427792345773467601'),
                BigNumber('39998306669877484034148915098147533988765761773774361321345'),
                BigNumber('39994556324979621987961991023550962208603977864973502546602'),
                BigNumber('39993555924146705602754466620806408973512373603774510078004'),
                BigNumber('39989514976461572637494580804179733747975597291067933717285'),
                BigNumber('39988193951118335404812375698570025614285027774224532599953'),
                BigNumber('39985622524819206524207356005169657370160205887146448875219'),
                BigNumber('39984310045679181802974658390062059025842972028108117821789'),
                BigNumber('39983550517173342350314172652444183340576658027161042060860'),
                BigNumber('39982645808640242949599864123323912044675933196913752022099'),
                BigNumber('39982306633695981339649423858001319387652901076406632664405'),
                BigNumber('39979534241285166045220217701427606638423660734935894929304'),
                BigNumber('39979413292660527102294315322489973421168604646477282138746'),
                BigNumber('39974237145062510861179099324735197530532842235277886370721'),
                BigNumber('39972132832028669033911392179647370476305098198795489084723'),
                BigNumber('39971972314553264802168476572677632596364021581135621620404'),
                BigNumber('39971928106822375650796618726558672268367977950731415157863'),
                BigNumber('39971899642577036976922390347009306792888010106366114615784'),
                BigNumber('39970722276656894698487156085177517071998496828539060389883'),
                BigNumber('39964960470068159498000508651521068123528600515558458827053'),
                BigNumber('39962893518472312770095576806646249894089542973494145722767'),
                BigNumber('39962037627482275446733612148985179849085022004547915156426'),
                BigNumber('39959833980887266963351689580303492086458788368181710897105'),
                BigNumber('39959689479608007862574115921697623653842521976316496775950'),
                BigNumber('39955301659334633709300171818923565073532396099733587032510'),
                BigNumber('39955281897638192872001444815147090158340338919905072609103'),
                BigNumber('39955266954587067900452941737066844348836494602130121284695'),
                BigNumber('39955011785883377580096291667591961052287268118332099109358'),
                BigNumber('39954088255647374431006169092353256302695132719621193347354'),
                BigNumber('39953944235152200342303376130868131831379607161662370336593'),
                BigNumber('39953938742404820177780217046644518011150291569061716241266'),
                BigNumber('39953933350857285091853492476871929089037173846315252748270'),
                BigNumber('39952148966123231639637959650276859384622779693905207753043'),
                BigNumber('39950060423940675335866021459754759337560566137038374927716'),
                BigNumber('39947358116963054012855607609515664683670806311733147285515'),
                BigNumber('39947038479191709694133535331401623684702266642675568413868'),
                BigNumber('39945067766935925669564218798551997539126563885877050052517'),
                BigNumber('39945058490925974241312180321500647380698258239849950536065'),
                BigNumber('39944881891516734192058764682787906429272978046010211013398'),
                BigNumber('39944869227779081735607208540090938962821862167773123565866'),
                BigNumber('39944863747107688899770947887931106179194955929937401026442'),
                BigNumber('39944863024297117464749488370640492922380788576784254896582'),
                BigNumber('39944861087727432927741633745890522464254529352929876803599'),
                BigNumber('39944843611806283933698713984387210125466516616365175256833'),
                BigNumber('39944814036095417282900418265143011693677980170416241486899'),
                BigNumber('39944793390187073845541867998963519381158251896346835521128'),
                BigNumber('39944783472970084532901570741405697180090321007066148006693'),
                BigNumber('39944783406768025434602267115182455490000255533840408480829'),
                BigNumber('39944783406768025434894101513010971203782058145839979286079'),
                BigNumber('39944783305521594098655781939413372797893450518185520480939'),
                BigNumber('39944780647495996893475889788570285214311499924077112642505'),
                BigNumber('39944779502191117451475657325584385972176631033425319512147'),
                BigNumber('39944639998373692524542007424730087972258544038042181751385'),
                BigNumber('39944592748912479844645336497615297909405770700152206990529'),
                BigNumber('39944453137195842973024505850679695237529593675953686015143'),
                BigNumber('39944449226219134031984808913040000216772750540293381315591'),
                BigNumber('39943038300892425433841811565016661715315868189655365767920'),
                BigNumber('39943004479246029007667947020804733681506522580344792521652'),
                BigNumber('39942961215319339085494134801970406898654300642302150926786'),
                BigNumber('39942903809622798192903989554051788898378525948676625590433'),
                BigNumber('39942775092583991326533192080080624370535943442783101600079'),
                BigNumber('39941675935560171007519563451570852170178099034879668340019'),
                BigNumber('39941632055459230393739797911427546474233106640306283957898'),
                BigNumber('39941515302008830496426111049680697219513845202747924481138'),
                BigNumber('39941481469122412474525239611381326974008597900813571542931'),
                BigNumber('39941465864669787504400173970531883680544163728027145423805'),
                BigNumber('39941401938103062540450107219277289404937298014047054207270'),
                BigNumber('39940909818858576846555076577101630895907293188459221210759'),
                BigNumber('39940908615249134998857501407387107429796103068788217072076'),
                BigNumber('39940887136282360599876783254134855189738885621497137196993'),
                BigNumber('39940866465998566735577098758566528966770749083574330092821'),
                BigNumber('39940857172502824003360968234266213782772757577336222918512'),
                BigNumber('39940810944641536463939544680689220435716659950562868611313'),
                BigNumber('39940810554435228585700379842926518835080471040181725817115'),
                BigNumber('39940769863442453556456443591502755633662920502573212526465'),
                BigNumber('39940461372588252636367891156545646235557114060055515083541'),
                BigNumber('39940446504657187865905434553548688860491367793398460256950'),
                BigNumber('39940425413088789915581047271177378184131431371906111270702'),
                BigNumber('39940395035685044411538861788756601999658748056290742608406'),
                BigNumber('39940234321826066651841060663584707253462047637694291019051'),
                BigNumber('39940213668058762200164967794773780396210384825381061368497'),
                BigNumber('39939269326400804733353278302987247313651974876601104056031'),
                BigNumber('39939254064239552523027968139010622486949184176410297945498'),
                BigNumber('39939188488077718023669632302477022165969044132145896814106'),
                BigNumber('39939188488077718023699716324245569177474748543531383590650'),
                BigNumber('39939053072528952200851298089466260109747276102429168178175'),
                BigNumber('39939052890771210910069948175095603551297815494070008093070'),
                BigNumber('39939031840280607209208393541092780487135222126487991655492'),
                BigNumber('39939002315699372700721664604044135070681290147978226867801'),
                BigNumber('39938993120602947466212072136029473130767555635659680725685'),
                BigNumber('39938845966074085653587270645567434449783379120999545151545'),
                BigNumber('39938828064452740420221071597128436309560188784322845329259'),
                BigNumber('39938646956681119275279964709284984192614743597744302544023'),
                BigNumber('39938630857762857511769695570541279325608651857518373475042'),
                BigNumber('39938630857762857512068865179111562477890377104102850496470'),
                BigNumber('39938630857762857512102266310966955461610888551480780578475'),
                BigNumber('39938630857650707064333648849733617803727376187536178069246'),
                BigNumber('39938619758195347642327134332880037438346317296519113906821'),
                BigNumber('39938592359130518688730310576485731000949406126440040042364'),
                BigNumber('39938396177479402730898554466622316107142247847032801457599'),
                BigNumber('39938384938786686873261878702573997083609768552603740613622'),
                BigNumber('39938384938786686874806862990847193398412497480082345361233'),
                BigNumber('39937019913848604436047546944908578526020326107605141558975'),
                BigNumber('39936977587474724244821570934906118809532249634581841013760'),
                BigNumber('39936896822030495144645302772627495784144945258728104509710'),
                BigNumber('39936740444974287969636639909319723092747744064870439644504'),
                BigNumber('39936740404013951744963502275589197241077329999746566573916'),
                BigNumber('39936739881247643460251669074287060026193683214662730342568'),
                BigNumber('39936722551912615465033996662209774112932415442352435976038'),
                BigNumber('39936285768984838256146302222931098582495504669694301051056'),
                BigNumber('39936260723932816159557931508856255712669520677878074453834'),
                BigNumber('39936259937797048658490076176929334100604456700205341281220'),
                BigNumber('39936249805437857184499585450489127023710548061663635824397'),
                BigNumber('39936233989131364135640732654585442320765505645610861974352'),
                BigNumber('39936233989131364135785349788047101953145320437807029531083'),
                BigNumber('39936191839839539493276804071776316176508751780891859515171'),
                BigNumber('39931009441150969198613076882194510474781030750099750930530'),
                BigNumber('39930900781484928948473006283898261532400148227246063674290'),
                BigNumber('39930846166196761644790875894923362093932318182386273763757'),
                BigNumber('39930669829441528305161336519027336861054753757933047581094'),
                BigNumber('39930541206196422135546215279367571672251274100743043952672'),
                BigNumber('39929774797795617089340482321125788721986654802727542996505'),
                BigNumber('39929752575203625415237255927601672229062172385473537256968'),
                BigNumber('39929751593930873744623863320544537962529733488436436314489'),
                BigNumber('39929751593916311358104125936333973673415501108745789937176'),
                BigNumber('39929695065018972262432820940642373590652097500394062948458'),
                BigNumber('39929694081107864028754035241662505835120419610556365820855'),
                BigNumber('39929680590056184964078872523349454812948400721154463209186'),
                BigNumber('39929656768832954455670048894117014965267571853422678993075'),
                BigNumber('39929640551431636279362797094868517742212630038343793403292'),
                BigNumber('39929621100715942829510917585551339590294289567891184263987'),
                BigNumber('39929585840265072317992223127701615232965193317278729009680'),
                BigNumber('39923943877672968067914056223250211112379617862839366294150'),
                BigNumber('39921884111957222089307054868084052672769365098229477853567'),
                BigNumber('39921807733036077820861168424107440036306567702148400475149'),
                BigNumber('39904888397861211168936282954620905589149566803861635224902'),
                BigNumber('39904113770804116473272726018660149418183335338885163982397'),
                BigNumber('39901542758815568834843843146094960724931161558150056070427'),
                BigNumber('39897176285742496091700950463149591212089337032320046970844'),
                BigNumber('39895743375790877593012887431583630712076068317206802185740'),
                BigNumber('39893453491206281911983227440500674130053324440803659368589'),
                BigNumber('39892378864765056152571104567298807855464728275709130382032'),
                BigNumber('39892247747209475458854327694196053366927211045769489258271'),
                BigNumber('39891226825656459407597447779681968783901674189049403144496'),
                BigNumber('39890938679304724089346001986279202812314897023114553707842'),
                BigNumber('39889413378106355826509321441460778830182436436644466249942'),
                BigNumber('39889039684559227691053299364331930605646514591608645058324'),
                BigNumber('39886350415118707752458492052841362646446946068698161639281'),
                BigNumber('39884957613650305626198722717326285647532292045649239535541'),
                BigNumber('39883571690213351920709845659696917223155853775557322512803'),
                BigNumber('39883144727606450558083469916679436645558722571429832735453'),
                BigNumber('39882845255595805632143654751230120346258406807676284036169'),
                BigNumber('39881165278679353867065558034946446855282584795858575276694'),
                BigNumber('39879888105837766492996799259559855173519800921036674274863'),
                BigNumber('39879437553109164378183796229453828920793383514603471666159'),
                BigNumber('39879392705379424817976233369464864894297632665690968110447'),
                BigNumber('39879234060848720137619840099434685023844210664716228214191'),
                BigNumber('39879183538030315521600453035893701883829587420246046674713'),
                BigNumber('39879146712762335503065712784084274067234639608112981525948'),
                BigNumber('39879074109384493352576456017654628128314713595789261617868'),
                BigNumber('39860420425925429441720535698667492357963710015391869006015'),
                BigNumber('39860256067423640016020079064339322579623916691942987041301'),
                BigNumber('39859772980349880949245744397246223912267790652160704275387'),
                BigNumber('39859719578542045131714328157466814790509926147203470427693'),
                BigNumber('39859452873642748339440432685461918683809356128383075446538'),
                BigNumber('39859449531527854203322510489512267436609477976860835236997'),
                BigNumber('39859448607938633777280846976713157646724251452798838112715'),
                BigNumber('39859395171822796328471082468065694877583744174755037274448'),
                BigNumber('39858660108472666238743077390552988486905600574263673378183'),
                BigNumber('39858645274394600995458071444412752480438592394540957035050'),
                BigNumber('39858639147718254149900114001439366210491848794252966385720'),
                BigNumber('39858600058283200146299133415042489499431054573404932156151'),
                BigNumber('39858314726612950724534622434403772129728029368131715714877'),
                BigNumber('39858286169503740923826896950187317245799849547558122609558'),
                BigNumber('39858276408677729749698717911855448472827317400409917977326'),
                BigNumber('39858243060539331898811962400296705038448168894703758602995'),
                BigNumber('39858241777926556492395816548983053377723377281202828488373'),
                BigNumber('39858176918275578217979477106787991446777655324771650049734'),
                BigNumber('39858091689962800436801129784417531503182127389277124418203'),
                BigNumber('39857395617666581960509463814828393896388244746728516404251'),
                BigNumber('39857278006606972215647578494121134854479474642371390377140'),
                BigNumber('39857090030017500130069695656390681864062467561534459892779'),
                BigNumber('39855527129597054908458870205246545162208212225022982978762'),
                BigNumber('39855416385126046711943538528284723591228412843693804937435'),
                BigNumber('39855414326198908095393400203061950732622678413072055143762'),
                BigNumber('39855216888336133046686419226012135188023846753376217405898'),
                BigNumber('39855213736511022306761066318958727530670312001401007125892'),
                BigNumber('39853129173234605165114426248127077326937244817972765635327'),
                BigNumber('39853126133807569503400141462720711177393606917549692520375'),
                BigNumber('39853098338695979006651396646231066300682692142860980305715'),
                BigNumber('39853097342394599041360168186353548824234560529110090795735'),
                BigNumber('39853079545127360889926860314379385356547541114101004847617'),
                BigNumber('39851852416423254098116672109066724021200938193907406780700'),
                BigNumber('39850497480879412922880110957195149365512534667413923412713'),
                BigNumber('39850208916533057855882255966007719714131218579813736362987'),
                BigNumber('39850194261425631370004012425227666023318067325834820979297'),
                BigNumber('39850193036369250660212887123156273401506225237207239485420'),
                BigNumber('39850075477046433144687998585556503039801631710071074920471'),
                BigNumber('39850002632911217680159691075652750846524771017662134206593'),
                BigNumber('39850000000977804567367090311988257353171555472713874362134'),
                BigNumber('39849999134209567163076506296689101169044122188262936883123'),
                BigNumber('39849998041772194631325782295234237350544068613604359774144'),
                BigNumber('39849851161407623853777855400028151629307427060616622925625'),
                BigNumber('39848808895510117521890043186784100247438650798642306244635'),
                BigNumber('39848808895510117521933164581821500801612005733512113987235'),
                BigNumber('39848786042580939489990894603487793017063202173112960950105'),
                BigNumber('39848778111077385494909202508720286051132398942710725482750'),
                BigNumber('39848676490119216806172119827321434360248161877158947263481'),
                BigNumber('39848676490119216806129790855645193369647924498598714508368'),
                BigNumber('39848676490119216806327628926995887617642619558498846167596'),
                BigNumber('39848669105459572769585919191277071671582082608292788047158'),
                BigNumber('39848669105459572769645682533917972068225759631646697996614'),
                BigNumber('39848660127480816608151007130290952312513860553408189219452'),
                BigNumber('39848651693588349456685229558205275822840347470561984888863'),
                BigNumber('39848643989396224368077441536444879778213367460213268422028'),
                BigNumber('39847977081203320021360210954726424446502984843720215912381'),
                BigNumber('39847957203528129553414242786958229693147147245946921740264'),
                BigNumber('39847609434011097321598776817442209253042586880356732782574'),
                BigNumber('39847605201696483598247920042252044710887596352770037094602'),
                BigNumber('39847594052804876821645607778057036572930981582492982728258'),
                BigNumber('39847593745317741875268868522697333367321866722361040337211'),
                BigNumber('39847593478232577095316001086769414885986979250638528466484'),
                BigNumber('39847593478232577095332041547139688631063659587998536290916'),
                BigNumber('39847593399121151819039623130823725126524710288135072002802'),
                BigNumber('39847582224020661149988761959384097115151128519030990016493'),
                BigNumber('39847430268789217042749331750566428434121277690411472740176'),
                BigNumber('39847280223635956236192626369896181409439600060849085216859'),
                BigNumber('39847150982024079310602373216597139084526446782086822771566'),
                BigNumber('39847037415748593396832687522994476696656463075768112348819'),
                BigNumber('39846948394572126821931588402121561889012389748349371995056'),
                BigNumber('39846860439638153754508291611298676709277813863708023915629'),
                BigNumber('39846856996316233698821572962371444811945889470991965657042'),
                BigNumber('39846852494671283071243756611573742376939061751066085709277'),
                BigNumber('39846844577366234431568842438343955747004306979603747902181'),
                BigNumber('39846840635152537179141740318576124906850908484887818204335'),
                BigNumber('39846838724652312275076125466705056195681154662472015689345'),
                BigNumber('39846836849588908123011944273745876056113478707081354432873'),
                BigNumber('39845877611897914034231690240722976070761327169934559416907'),
                BigNumber('39845877134246816113076193786827555346694473518948251604580'),
                BigNumber('39845828728927163934379006027816029311838526106503890772018'),
                BigNumber('39845819876948666279566344127589492117786456788135838628457'),
                BigNumber('39845817121971560556324359036391899523904438396905768849925'),
                BigNumber('39845816966523034210510291523359803253443983923481301922698'),
                BigNumber('39845816966523034210428794630318395308699001978273134759577'),
                BigNumber('39845787817047559382770499298366247614020175117479467073591'),
                BigNumber('39845786922532824005537259399185262324897552978016401093523'),
                BigNumber('39845786922532824005487019277833160737631518654750390934612'),
                BigNumber('39845786225153843988633719670106408016267727404385296897727'),
                BigNumber('39845786225153843988641865226725916563188227180612056399314'),
                BigNumber('39845786165230894211852321796664898002561440604088301680712'),
                BigNumber('39845783134635689573254341186345253128771181754449230520960'),
                BigNumber('39845759276831654686054300187584545771238152581420585507471'),
                BigNumber('39845759033394779934017308692653664616738034166563481790804'),
                BigNumber('39845633796415538643099520217765662041437188882163579743647'),
                BigNumber('39845633268248971104202735919771358845377763507319248600796'),
                BigNumber('39845624620864846845907309803935092205054406687824817074140'),
                BigNumber('39845614867691180281511076249677220129250725336418730035091'),
                BigNumber('39845591687828104572886195708282954734307604518078104601822'),
                BigNumber('39845591600218244414189688944547085256221888209393290867559'),
                BigNumber('39845590666118548971735825562970184992524230592831702276454'),
                BigNumber('39845590453514818335744913491190579399029709523188605433323'),
                BigNumber('39845590081642867415459997537317201629637531274213715813427'),
                BigNumber('39845590072319951682264318189651057356225113402109830251209'),
                BigNumber('39845589925425656683390441642264569782136239931597423104305'),
                BigNumber('39845589078207144550076940222302516456490212897974237030720'),
                BigNumber('39845572241256803911413424848123367023674256651553587152092'),
                BigNumber('39845497050464459385889137106890550962968910538846484179141'),
                BigNumber('39845495416781310662144644063263606186492733586609567715880'),
                BigNumber('39845478821225141116908136578994554424585808306343134548624'),
                BigNumber('39845478821225141116777229598381789591432556676628635512270'),
                BigNumber('39845478821225141116837797915496304713618210672793665479109'),
                BigNumber('39845478668338591281615246068509928336169954396066751819348'),
                BigNumber('39845478668338591281664773878031146812746453948389044023103'),
                BigNumber('39845478668338591281538541070041930475773441466459113527363'),
                BigNumber('39845475348795329496069786534002532093152076033194860663499'),
                BigNumber('39845475309332577514347964385342089796559556720638648133948'),
                BigNumber('39845475309332577514484742042173425713284907667198015451410'),
                BigNumber('39845475309332577514508733225111135603859317914867185674754'),
                BigNumber('39845319040086959122863635010983462803005249577836467917783'),
                BigNumber('39845318766126407696031039285450003347511325802801422838409'),
                BigNumber('39845317384428990591442618150760769849742817757623648335093'),
                BigNumber('39845317384428990591518765813749388689716623262770143986368'),
                BigNumber('39845312884439357377779158144643250986678961617049796178419'),
                BigNumber('39845201531037648139574192563288787643346284338010604046911'),
                BigNumber('39845201531037648139571055590398207297679662612089267165056'),
                BigNumber('39845167074721075164336839105588020635065297228494726145293'),
                BigNumber('39845166105909556196472012806456437491549373471346326461368'),
                BigNumber('39845163560613133233097587328274104396113604807751333109116'),
                BigNumber('39845093246319946609739439067400688038639777909800528708510'),
                BigNumber('39845071606799001755134045488225114473102924594753360330619'),
                BigNumber('39845065507535221523941319061748737580467683233542363819779'),
                BigNumber('39845011638606543562880213462535437941455787748255760883009'),
                BigNumber('39844598095871022214156288887278658551081710743080377953268'),
                BigNumber('39844597918850449819888616430392485673847785181066574372708'),
                BigNumber('39844547962031871573649742438327855049909576978585630423057'),
                BigNumber('39844546369601622550890630167881134696838752445040680086130'),
                BigNumber('39844539271733219089651253587186712462173290014258087247101'),
                BigNumber('39844530733747251364545406486472514745453148033214344358015'),
                BigNumber('39844525287249475869370312157065962700509610210407014797706'),
                BigNumber('39844523887090342250843280141934007036889625110154176223821'),
                BigNumber('39844501455672879094498833872630985588873817727442737131371'),
                BigNumber('39844498755928943335028700347246028096383650796783685444718'),
                BigNumber('39844498555520330609346056863811581765938934142607143018772'),
                BigNumber('39844456895893706649614668065547414208662682583221786295445'),
                BigNumber('39844452079807602001133680771727948574503630742782728517592'),
                BigNumber('39844450437411083812592511234374710321993953409720451133291'),
                BigNumber('39844422492375954292250005416558575364556721034399103257143'),
                BigNumber('39844420890854516579579839022030033912083674811084016317230'),
                BigNumber('39844417362041351760462691372150258446585898658718297842007'),
                BigNumber('39844417362041351760574680885200794513702004633833161929281'),
                BigNumber('39844415965294410563429175387836895401446821707642323172790'),
                BigNumber('39844388253372940135879976953524661365637564094205406696150'),
                BigNumber('39844387464253801242906519425679440226520292724268840556269'),
                BigNumber('39844378613923997680732432169970118734300476530229721562571'),
                BigNumber('39844301178425525174405021333227479528559634984512230998847'),
                BigNumber('39844298806328018201407090443054999501060879853390406303330'),
                BigNumber('39844295704383965480054068616669134710597550362621748593698'),
                BigNumber('39844292935758112372294023278175352620281270462175581081061'),
                BigNumber('39844286911648267174362803527023362847886900354037153569646'),
                BigNumber('39844221042435462125242240622928888632389375347377644205305'),
                BigNumber('39844180665364791272911181876792731298985508782328586867852'),
                BigNumber('39844106947877422496890829316764606057255181205399160934224'),
                BigNumber('39843936852424633932340377213355863945136222222281763348847'),
                BigNumber('39843924661707374257934669029007452754281395501242580229850'),
                BigNumber('39843920124979984020679909176222619853043512665368602466634'),
                BigNumber('39843913950334934959752547556873209369237656553704578533126'),
                BigNumber('39843900466971883817241707757585684363055135704776387645732'),
                BigNumber('39843884364002446380187259365053145376972373983870516285887'),
                BigNumber('39843865081973626046820971515744050297998073649832262253325'),
                BigNumber('39843846019630004182886909067737489257512943612080062388024'),
                BigNumber('39843796323755969022368277562012871929702812561969753177080'),
                BigNumber('39843770555993193625471839142738235993754350986221427653634'),
                BigNumber('39843746693139556401516286857497711882830079640107011443403'),
                BigNumber('39843731136320475747143497169902584706515618304673645995310'),
                BigNumber('39843712877047606581192027033687119683461121503277102307849'),
                BigNumber('39843711479048768450872313223600395404701132767436201560311'),
                BigNumber('39843707228934101323497113814646033419601227685139477066168'),
                BigNumber('39843706885762116737287481335909627132601705453742045800709'),
                BigNumber('39843704454018679845683518995594124104862877959373526834922'),
                BigNumber('39843703489891967624584893952495612962628433481051504237535'),
                BigNumber('39843681477235846137704499962531756807117581928437048458832'),
                BigNumber('39843677957332542649474594783665003528124109850647006773326'),
                BigNumber('39843676379162683549951468804410966513412375035959795862833'),
                BigNumber('39843672183964961819465991628820642632531371592390793532607'),
                BigNumber('39843669234444004846688067222979936277472074770606199429558'),
                BigNumber('39843667585415780277094443310799237921485807389997143586139'),
            ]
            const results = [rs, ...r]
 
            const lobbyDailyData        = results[0]
            const lobbyDailyETH         = results[1]
            const pastEntries           = results[2]
            const hasPendingEntryThisDay = new BitSet(
                BigNumber(results[3][1]).toString(2) +
                BigNumber(results[3][0]).toString(2)
            )

            new Promise((resolveLobby, reject) => {
                Promise.all(lobbyDailyData.map((mappedDayData, day) => { // returns array of lobby day promises
                    return new Promise(async (resolveDay, reject) => {
                        const hexa = BigNumber(mappedDayData).toString(16).padStart(64, '0')
                        const unclaimedSatoshisTotal = BigNumber(hexa.slice(12,28), 16)
                        const availableHEX = (day === 0) ? BigNumber(1e13) : unclaimedSatoshisTotal.div(350).times(HEX.HEARTS_PER_SATOSHI)
                        const totalETH = BigNumber(lobbyDailyETH[day])
                        const HEXperETH = availableHEX.div(totalETH.div(1e18))

                        let entries = null
                        if (hasPendingEntryThisDay.get(day))
                            entries = await this.getDayEntries(day, wallet.address)
                        else
                            entries = pastEntries[day]
                        const {
                            mintedHEXTotal,
                            rawEntriesTotal
                        } = this.calcEntryTotals(entries)

                        resolveDay({
                            day,
                            availableHEX,
                            totalETH,
                            entries,
                            HEXperETH,
                            mintedHEXTotal,
                            rawEntriesTotal
                        })
                    })
                }))
                .then(days => resolveLobby(days))
                .catch(e => reject(e))
            })
            .then(lobbyData => {
                this.setState({
                    dailyDataCount,
                    lobbyData,
                    lobbyDataUI: lobbyData,
                    pastEntries,
                    historyDataReady: true
                }, () => this.sortLobbyDataStateByField('day'))
            })
            .catch(e => debug('Lobby::getHistory ERR: ', e))
        })
    }

    componentDidMount = () => {
        if (localStorage.getItem('debug')) window._LOBBY = this
        this.getToday()
        this.getHistory() // state.lobbyData
        this.subscribeEvents()
    }

    componentWillUnmount = () => {
        this.unsubscribeEvents()
    }

    resetFormAndReload = async () => {
        await this.setState({ 
            unmintedEntries: [ ],
            entryHEX: '' 
        })
        this.getToday()
    }

    sortLobbyDataStateByField = (keyField) => {
        const { keyField:oldKey, dir:oldDir } = this.state.lobbySortKey
        const dir = (oldKey === keyField) ? -oldDir : -1
        const lobbySortKey = { keyField, dir }
        this.setState({
            lobbySortKey,
            lobbyDataUI: [ ...this.state.lobbyData ].sort((a, b) => {
                const bn_a = BigNumber(a[keyField])
                const bn_b = BigNumber(b[keyField])
                return dir * (bn_a.lt(bn_b) ? -1 : bn_a.gt(bn_b) ? 1 : 0)
            })
        })
    }

    render() {
        const { currentDay } = this.props.contract.Data

        const handleSortSelection = (e) => {
            e.preventDefault()
            e.stopPropagation()
            const hash = e.target.closest('a').hash
            const keyField = hash.match(/sort_(.+)$/)[1] || null
            keyField && this.sortLobbyDataStateByField(keyField)
        }

        const LobbyDays = () => {
            if (!this.state.historyDataReady) {
                if (this.state.error) {
                    debug('ERROR: ', this.state.error)
                    return ( <div className="text-center">error :/</div> )
                } else 
                    return ( <div className="text-center">loading ...</div> )
            }

            const lobbyData = this.state.lobbyDataUI
            return (
                <Container className="pl-0 pr-3 row-highlight-even">
                    <p className="text-center"><b>Transform History</b></p>
                    <Row key="header" className="py-0 mx-0 xs-small align-items-end">
                        <Col xs={1} sm={1} className="p-0"><a href="#sort_day" onClick={handleSortSelection}>Day</a></Col>
                        <Col xs={3} sm={2} className="p-0"><a href="#sort_availableHEX" onClick={handleSortSelection}>Available</a></Col>

                        <Col        sm={2} className="px-0 d-none d-sm-inline"><a href="#sort_totalETH" onClick={handleSortSelection}>ETH</a></Col>
                        <Col        sm={2} className="px-0 d-none d-sm-inline">
                            <a href="#sort_HEXperETH" onClick={handleSortSelection}>
                                <span className="d-sm-inline d-md-none"><sup>HEX</sup>/<sub>ETH</sub></span>
                                <span className="d-sm-none d-md-inline">HEX/ETH</span>
                            </a>
                        </Col>

                        <Col xs={4} sm={2} className="px-2">
                            <a href="#sort_mintedHEXTotal" onClick={handleSortSelection}>
                                <span className="d-inline d-sm-inline d-md-none">Ur HEX</span>
                                <span className="d-none d-md-inline">Your HEX</span>
                            </a>
                        </Col>        
                        <Col xs={4} sm={3} className="p-0"><a href="#sort_rawEntriesTotal" onClick={handleSortSelection}>Your ETH</a></Col>
                    </Row>
                    { lobbyData.map(dayData => { 
                        const { day, availableHEX, totalETH, HEXperETH, mintedHEXTotal, rawEntriesTotal } = dayData

                        return (
                            <Row key={day} className={"py-0 mx-0 xs-small"+(rawEntriesTotal.gt(0) ? " text-success" : "")}>
                                <Col xs={1} sm={1} className="px-0">{day+1}</Col>
                                <Col xs={3} sm={2} className="px-0"><CryptoVal value={availableHEX} /></Col>

                                <Col        sm={2} className="px-0 d-none d-sm-inline"><CryptoVal value={totalETH} currency="ETH" /></Col>
                                <Col        sm={2} className="px-0 d-none d-sm-inline"><CryptoVal value={HEXperETH} /></Col>

                                <Col xs={4} sm={2} className="px-2"><CryptoVal value={mintedHEXTotal} /></Col>
                                <Col xs={4} sm={3} className="px-0"><CryptoVal value={rawEntriesTotal} currency="ETH" showUnit /></Col>
                            </Row>
                        )
                    }) }
                </Container>
            )
        }

        const HeaderDetail = () => {
            const epocHour = new Date(HEX.START_DATE).getUTCHours() // should convert to local time
            const now = new Date(Date.now())
            const nextEpoc = new Date(now)
            nextEpoc.setUTCHours(epocHour)
            nextEpoc.setMinutes(0)
            nextEpoc.setSeconds(0)
            if (nextEpoc < now) nextEpoc.setUTCDate(nextEpoc.getUTCDate()+1) // NOTE: "Date" meqns "day of month", here
            const timerStart = nextEpoc - now

            return (
                <Container>
                    <Row>
                        <Col className="text-right"> 
                            <strong>Day</strong>{' '}
                            <span className="text-info">{currentDay+1}</span>
                            <span className="text-muted">/351</span>
                        </Col>
                        <Col>
                            <div className="float:right">
                                <Timer
                                    initialTime={timerStart}
                                    direction="backward"
                                >
                                {() => 
                                    <>
                                        <small>closing</small>{' '}
                                        <Timer.Hours formatValue={value => value.toString().padStart(2, '0') } />:
                                        <Timer.Minutes formatValue={value => value.toString().padStart(2, '0') } />:
                                        <Timer.Seconds formatValue={value => value.toString().padStart(2, '0') } />
                                    </>
                                }
                                </Timer>
                            </div>
                        </Col>
                    </Row>
                    <Row>
                        <Col className="text-right"><strong>Available </strong></Col>
                        <Col> <CryptoVal value={this.state.todayAvailableHEX} showUnit /></Col>
                    </Row>
                    <Row>
                        <Col className="text-right"><strong>Total Entries</strong></Col>
                        <Col> <CryptoVal value={this.state.todayPendingETH} currency="ETH" showUnit /> </Col>
                    </Row>
                    <Row>
                        <Col className="text-right"><strong>HEX/ETH</strong></Col>
                        <Col> <CryptoVal value={this.state.HEXperETH} showUnit /> </Col>
                    </Row>
                    <Row>
                        <Col className="text-right"><strong>Your HEX</strong></Col>
                        <Col> <CryptoVal value={this.state.todayYourHEXPending} showUnit /></Col>
                    </Row>
                    <Row>
                        <Col className="text-right"><strong>Your ETH</strong></Col>
                        <Col> <CryptoVal value={this.state.todayYourEntriesRawTotal} currency="ETH" showUnit /></Col>
                    </Row>
                </Container>

            )
        }

        const handleAmountChange = (e) => {
            e.preventDefault()
            e.stopPropagation()
            this.setState({
                entryETH: e.target.value
            })
        }

        return (
            <Accordion id="lobby_accordion" className="my-3" >
                <Card bg="secondary" text="light rounded pb-0">
                    <Accordion.Toggle as={Card.Header} eventKey="0">
                        <BurgerHeading>Transform<span className="d-none d-sm-inline"> (AA Lobby)</span></BurgerHeading>
                        <div className="float-right pr-1 text-success">
                        { HEX.lobbyIsActive() ? 
                            <> 
                                <span className="text-muted small">AVAILABLE </span>
                                <strong><CryptoVal value={this.props.wallet.balanceETH} currency="ETH" showUnit /></strong>
                            </> : <> 
                                <span className="text-muted small">CLOSED</span> 
                            </>
                        }
                        </div>
                        <Container>
                            <ProgressBar id="lobby" 
                                min="0" max="350" 
                                now={currentDay+1}
                                className="mb-1"
                                variant={currentDay > 263 ? "danger" : currentDay > 125 ? "warning" : currentDay > 88 ? "info" : "success"}
                            />
                    { HEX.lobbyIsActive() && <>
                            <HeaderDetail />
                            <Form>
                                <Row className="my-2">
                                <Col xs={{ span:5, offset:1 }} sm={{ span:4, offset: 2 }} md={{ span:3, offset: 3 }} className="text-right">
                                    <Form.Control
                                        type="number"
                                        placeholder="ETH amount"
                                        value={this.state.entryETH}
                                        aria-label="amount of ETH forthis lobby entry"
                                        aria-describedby="basic-addon1"
                                        onChange={ handleAmountChange }
                                        onClick={(e) => e.stopPropagation()} 
                                    />
                                </Col>
                                <Col xs={6}>
                                    <VoodooButton
                                        contract={ window.contract }
                                        method="xfLobbyEnter" 
                                        params={['0xD30542151ea34007c4c4ba9d653f4DC4707ad2d2'.toLowerCase()/*referrerAddr*/ ]}
                                        options={{ 
                                            from:this.props.wallet.address, 
                                            value: BigNumber(this.state.entryETH/*string*/).times(1e18) 
                                        }}
                                        inputValid={ BigNumber(this.state.entryETH).gt(0) }
                                        confirmationCallback={ this.resetFormAndReload }
                                        variant="lobby btn-enter"
                                    >
                                        ENTER
                                    </VoodooButton>
                                </Col>
                            </Row>
                        </Form>
                        {this.state.historyDataReady === true && this.state.unmintedEntries.length > 0 && 
                        <Container className="p-3 text-center">
                            <h4>Exit Previous Days</h4>
                            <p>Tap each <span className="text-success"><b>MINT</b></span> below to get your HEX...</p>
                            {this.state.unmintedEntries.map(data => {
                                const { day, entries } = data
                                const { availableHEX, totalETH } = this.state.lobbyData[day]
                                
                                const {
                                    potentialHEXTotal
                                } = this.calcEntryTotals(
                                    this.state.pastEntries[day],
                                    availableHEX,
                                    totalETH
                                )

                                return (
                                    <div className="text-center m-2" key={day}>
                                        <VoodooButton 
                                            contract={window.contract}
                                            method="xfLobbyExit" 
                                            params={[day, 0]}
                                            options={{ from: this.props.wallet.address }}
                                            confirmationCallback={this.resetFormAndReload}
                                            variant="lobby btn-mint"
                                            className="text-center"
                                        >
                                            <span className="text-info text-normal">
                                                <small>day {day+1}{entries.length > 1 && <sup>({entries.length} entries)</sup>}</small>
                                            </span>{' '}
                                            MINT&nbsp;<CryptoVal value={potentialHEXTotal}showUnit />
                                        </VoodooButton>
                                    </div>
                                )
                            })}
                        </Container>
                        }
                </> }
                        </Container>
                    </Accordion.Toggle>
                    <Accordion.Collapse eventKey="0">
                        <Card.Body className="bg-dark text-right"> 
                            <LobbyDays />
                        </Card.Body>
                    </Accordion.Collapse>
                </Card>
            </Accordion>
        )
    }
}

export default Lobby
