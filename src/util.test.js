import HEX from './hex_contract'
import { BigNumber } from 'bignumber.js'
import { 
    calcBigPayDaySlice,
    calcAdoptionBonus, 
    cryptoFormat,
    calcPartDayBonuses,
    calcPayoutRewards,
    calcPayoutBpdPenalty,
    calcInterest,
    calcApy,
} from './util'

const globals = {
    lockedHeartsTotal: BigNumber("5436379302282992615"),
    nextStakeSharesTotal: BigNumber("55961293641264340"),
    shareRate: BigNumber("103576"),
    stakePenaltyTotal: BigNumber("45932328042065"),
    dailyDataCount: 181,
    stakeSharesTotal: BigNumber("9720248700229424525"),
    latestStakeId: 167945,
    claimStats: {
        claimedBtcAddrCount: BigNumber("28615"),
        claimedSatoshisTotal: BigNumber("23310029239470"),
        unclaimedSatoshisTotal: BigNumber("1787305432772087")
    }
}

describe('HEX math helpers', () => {
    test('calcBigPayDaySlice => correct result', () => {
        const result = calcBigPayDaySlice(BigNumber("77345"), BigNumber(7103180085537) , globals)
        expect(result).toEqual(BigNumber("194615843936"))
    })

    test('calcAdoptionBonus => correct result', () => {
        const result = calcAdoptionBonus(BigNumber('8008135413375'), globals) 
        expect(result).toEqual(BigNumber("213296580101"))
    })
})

describe('CryptoVal number formatter: ', () => {
    const bnNaN = BigNumber("NaN")
    const bnInfinity = BigNumber(1).div(0)

    const c = 'ETH'
    const ETH = [
        { input:              123.456              , expect: { unit: "Wei", valueString:  "123.456", valueWithUnit:  "123.456 Wei"} },
        { input:              123.4567             , expect: { unit: "Wei", valueString:  "123.456", valueWithUnit:  "123.456 Wei"} },
        { input:              123                  , expect: { unit: "Wei", valueString:      "123", valueWithUnit:      "123 Wei"} },
        { input:           123456.789              , expect: { unit: "Wei", valueString:  "123,456", valueWithUnit:  "123,456 Wei"} },
        { input:        123456789.012              , expect: { unit: "Wei", valueString: "123.456M", valueWithUnit: "123.456M Wei"} },
        { input:     123456789012.345              , expect: { unit: "Wei", valueString: "123.456G", valueWithUnit: "123.456G Wei"} },
        { input: "123456789012345.678"             , expect: { unit: "Wei", valueString: "123,456G", valueWithUnit: "123,456G Wei"} },
        { input: BigNumber("123456789012345678")   , expect: { unit: "ETH", valueString: "0.123456", valueWithUnit: "0.123456 ETH"} },
        { input:           "     0.1234567e18 "    , expect: { unit: "ETH", valueString: "0.123456", valueWithUnit: "0.123456 ETH"} },
        { input:           "     1.2345678e18 "    , expect: { unit: "ETH", valueString: "1.234567", valueWithUnit: "1.234567 ETH"} },
        { input:           "    12.3456789e18 "    , expect: { unit: "ETH", valueString: "12.34567", valueWithUnit: "12.34567 ETH"} },
        { input: BigNumber("   1.2345678e18     ") , expect: { unit: "ETH", valueString: "1.234567", valueWithUnit: "1.234567 ETH"} },
        { input: BigNumber("  12.3456789e18     ") , expect: { unit: "ETH", valueString: "12.34567", valueWithUnit: "12.34567 ETH"} },
        { input: BigNumber(" 123.4567899e18     ") , expect: { unit: "ETH", valueString: "123.4567", valueWithUnit: "123.4567 ETH"} },
        { input:    "123456789012345678999.999"    , expect: { unit: "ETH", valueString: "123.4567", valueWithUnit: "123.4567 ETH"} },
        { input: BigNumber(123.4567e3).times(1e18) , expect: { unit: "ETH", valueString:  "123,456", valueWithUnit:  "123,456 ETH"} },
        { input: BigNumber(123.4567e6).times(1e18) , expect: { unit: "ETH", valueString: "123.456M", valueWithUnit: "123.456M ETH"} },
        { input: BigNumber(123.4567e9).times(1e18) , expect: { unit: "ETH", valueString: "123.456B", valueWithUnit: "123.456B ETH"} },
        { input: BigNumber(123.4567e12).times(1e18), expect: { unit: "ETH", valueString: "123.456T", valueWithUnit: "123.456T ETH"} },
        { input: BigNumber(123.4567e15).times(1e18), expect: { unit: "ETH", valueString: "123.456Q", valueWithUnit: "123.456Q ETH"} },
        { input: BigNumber("NOT A NUMBER")         , expect: { unit:    "", valueString:      "NaN", valueWithUnit:          "NaN"} },
        { input: BigNumber(1).div(0)               , expect: { unit:    "", valueString: "Infinity", valueWithUnit:     "Infinity"} },
    ]

    ETH.forEach(t => {
       test(`Currency:ETH ${BigNumber(t.input).toFormat(4).padStart(54, ' ')} => ${t.expect.valueString.padStart(8, ' ')} ${t.expect.unit}`,
           () => { expect(cryptoFormat(t.input, 'ETH')).toEqual(t.expect) })
    })
})

describe('CryptoVal number formatter: ', () => {
    const bnNaN = BigNumber("NaN")
    const bnInfinity = BigNumber(1).div(0)

    const c = 'HEX'
    const HEX = [
        { input:                        123       , expect: { unit: "Hearts", valueString:       "123",  valueWithUnit:       "123 Hearts"} },
        { input:                       "123"      , expect: { unit: "Hearts", valueString:       "123",  valueWithUnit:       "123 Hearts"} },
        { input:                       1230       , expect: { unit: "Hearts", valueString:     "1,230",  valueWithUnit:     "1,230 Hearts"} },
        { input:                       1234       , expect: { unit: "Hearts", valueString:     "1,234",  valueWithUnit:     "1,234 Hearts"} },
        { input:                      12345       , expect: { unit: "Hearts", valueString:    "12,345",  valueWithUnit:    "12,345 Hearts"} },
        { input:                     123456       , expect: { unit: "Hearts", valueString:   "123,456",  valueWithUnit:   "123,456 Hearts"} },
        { input:                    1234567       , expect: { unit:    "HEX", valueString:    "0.0123",  valueWithUnit:    "0.0123 HEX"} },
        { input:                   12345678       , expect: { unit:    "HEX", valueString:    "0.1234",  valueWithUnit:    "0.1234 HEX"} },
        { input:                  123456789       , expect: { unit:    "HEX", valueString:    "1.2345",  valueWithUnit:    "1.2345 HEX"} },
        { input:                 1234567890       , expect: { unit:    "HEX", valueString:   "12.3456",  valueWithUnit:   "12.3456 HEX"} },
        { input:                12345678901       , expect: { unit:    "HEX", valueString:   "123.456",  valueWithUnit:   "123.456 HEX"} },
        { input:               123456789012       , expect: { unit:    "HEX", valueString:  "1,234.56",  valueWithUnit:  "1,234.56 HEX"} },
        { input:         "1234567890123.456"      , expect: { unit:    "HEX", valueString:  "12,345.6",  valueWithUnit:  "12,345.6 HEX"} },
        { input:        "12345678901234.567"      , expect: { unit:    "HEX", valueString:   "123,456",  valueWithUnit:   "123,456 HEX"} },
        { input:            "12345000000000"      , expect: { unit:    "HEX", valueString:   "123,450",  valueWithUnit:   "123,450 HEX"} },
        { input:       "123456789012345.678"      , expect: { unit:    "HEX", valueString:   "1.2345M",  valueWithUnit:   "1.2345M HEX"} },
        { input: BigNumber(    "12345000E08")     , expect: { unit:    "HEX", valueString:  "12.3450M",  valueWithUnit:  "12.3450M HEX"} },
        { input: BigNumber(    "12345678E08")     , expect: { unit:    "HEX", valueString:  "12.3456M",  valueWithUnit:  "12.3456M HEX"} },
        { input: BigNumber(   "123456789E08")     , expect: { unit:    "HEX", valueString:  "123.456M",  valueWithUnit:  "123.456M HEX"} },
        { input: BigNumber(  "1234567890E08")     , expect: { unit:    "HEX", valueString:   "1.2345B",  valueWithUnit:   "1.2345B HEX"} },
        { input: BigNumber( "12345678901E08")     , expect: { unit:    "HEX", valueString:  "12.3456B",  valueWithUnit:  "12.3456B HEX"} },
        { input: BigNumber("123456789012E08")     , expect: { unit:    "HEX", valueString:  "123.456B",  valueWithUnit:  "123.456B HEX"} },
        { input: BigNumber(  "1234567890E11")     , expect: { unit:    "HEX", valueString:   "1.2345T",  valueWithUnit:   "1.2345T HEX"} },
        { input: BigNumber( "12345678901E11")     , expect: { unit:    "HEX", valueString:  "12.3456T",  valueWithUnit:  "12.3456T HEX"} },
        { input: BigNumber("123456789012E11")     , expect: { unit:    "HEX", valueString:  "123.456T",  valueWithUnit:  "123.456T HEX"} },
        { input: BigNumber("NOT A NUMBER")        , expect: { unit:       "", valueString:       "NaN",  valueWithUnit:           "NaN"} },
        { input: BigNumber(1).div(0)              , expect: { unit:       "", valueString:  "Infinity",  valueWithUnit:     "Infinity"} },
    ]

    HEX.forEach(t => {
       test(`Currency:HEX ${BigNumber(t.input).toFormat(4).padStart(54, ' ')} => ${t.expect.valueString.padStart(8, ' ')} ${t.expect.unit}`,
           () => { expect(cryptoFormat(t.input, 'HEX')).toEqual(t.expect) })
    })
})

describe('CryptoVal number formatter: ', () => {
    const bnNaN = BigNumber("NaN")
    const bnInfinity = BigNumber(1).div(0)

    const c = 'SHARES'
    const SHARES = [
        { input:                        123       , expect: { unit: "Shares", valueString:       "123",  valueWithUnit:      "123 Shares"} },
        { input:                       "123"      , expect: { unit: "Shares", valueString:       "123",  valueWithUnit:      "123 Shares"} },
        { input:                       1230       , expect: { unit: "Shares", valueString:     "1.230K",  valueWithUnit:    "1.230K Shares"} },
        { input:                       1234       , expect: { unit: "Shares", valueString:     "1.234K",  valueWithUnit:    "1.234K Shares"} },
        { input:                      12345       , expect: { unit: "Shares", valueString:    "12.345K",  valueWithUnit:   "12.345K Shares"} },
        { input:                     123456       , expect: { unit: "Shares", valueString:   "123.456K",  valueWithUnit:  "123.456K Shares"} },
        { input:                    1234567       , expect: { unit: "Shares", valueString:    "1.234M",  valueWithUnit:     "1.234M Shares"} },
        { input:                   12345678       , expect: { unit: "Shares", valueString:   "12.345M",  valueWithUnit:    "12.345M Shares"} },
        { input:                  123456789       , expect: { unit: "Shares", valueString:  "123.456M",  valueWithUnit:   "123.456M Shares"} },
        { input:                 1234567890       , expect: { unit: "Shares", valueString:    "1.234B",  valueWithUnit:     "1.234B Shares"} },
        { input:                12345678901       , expect: { unit: "Shares", valueString:   "12.345B",  valueWithUnit:    "12.345B Shares"} },
        { input:               123456789012       , expect: { unit: "Shares", valueString:  "123.456B",  valueWithUnit:   "123.456B Shares"} },
        { input:         "1234567890123.456"      , expect: { unit: "Shares", valueString:    "1.234T",  valueWithUnit:     "1.234T Shares"} },
        { input:        "12345678901234.567"      , expect: { unit: "Shares", valueString:   "12.345T",  valueWithUnit:    "12.345T Shares"} },
        { input:        "12345000000000"          , expect: { unit: "Shares", valueString:   "12.345T",  valueWithUnit:    "12.345T Shares"} },
        { input:       "123456789012345.678"      , expect: { unit: "Shares", valueString:  "123.456T",  valueWithUnit:   "123.456T Shares"} },
        { input:    BigNumber( "123.4567E12")     , expect: { unit: "Shares", valueString:  "123.456T",  valueWithUnit:   "123.456T Shares"} },
        { input:    BigNumber("1234.567E12")      , expect: { unit: "Shares", valueString:    "1.234P",  valueWithUnit:     "1.234P Shares"} },
        { input: BigNumber("NOT A NUMBER")        , expect: { unit:       "", valueString:       "NaN",  valueWithUnit:               "NaN"} },
        { input: BigNumber(1).div(0)              , expect: { unit:       "", valueString:  "Infinity",  valueWithUnit:          "Infinity"} },
    ]

    SHARES.forEach(t => {
       test(`Currency:SHARES ${BigNumber(t.input).toFormat(4).padStart(54, ' ')} => ${t.expect.valueString.padStart(8, ' ')} ${t.expect.unit}`,
           () => { expect(cryptoFormat(t.input, 'SHARES')).toEqual(t.expect) })
    })
})

const TEST_DAILY_DATA = [
    "39901542758815568834843843146094960724931161558150056070427",
    "39897176285742496091700950463149591212089337032320046970844",
    "39895743375790877593012887431583630712076068317206802185740",
    "39893453491206281911983227440500674130053324440803659368589",
    "39892378864765056152571104567298807855464728275709130382032",
    "39892247747209475458854327694196053366927211045769489258271",
    "39891226825656459407597447779681968783901674189049403144496",
    "39890938679304724089346001986279202812314897023114553707842",
    "39889413378106355826509321441460778830182436436644466249942",
    "39889039684559227691053299364331930605646514591608645058324",
    "39886350415118707752458492052841362646446946068698161639281",
    "39884957613650305626198722717326285647532292045649239535541",
    "39883571690213351920709845659696917223155853775557322512803",
    "39883144727606450558083469916679436645558722571429832735453",
    "39882845255595805632143654751230120346258406807676284036169",
    "39881165278679353867065558034946446855282584795858575276694",
    "39879888105837766492996799259559855173519800921036674274863",
    "39879437553109164378183796229453828920793383514603471666159",
    "39879392705379424817976233369464864894297632665690968110447",
    "39879234060848720137619840099434685023844210664716228214191",
    "39879183538030315521600453035893701883829587420246046674713",
    "39879146712762335503065712784084274067234639608112981525948",
    "39879074109384493352576456017654628128314713595789261617868",
    "39860420425925429441720535698667492357963710015391869006015",
    "39860256067423640016020079064339322579623916691942987041301",
    "39859772980349880949245744397246223912267790652160704275387",
    "39859719578542045131714328157466814790509926147203470427693",
    "39859452873642748339440432685461918683809356128383075446538",
    "39859449531527854203322510489512267436609477976860835236997",
    "39859448607938633777280846976713157646724251452798838112715",
    "39859395171822796328471082468065694877583744174755037274448",
    "39858660108472666238743077390552988486905600574263673378183",
    "39858645274394600995458071444412752480438592394540957035050",
    "39858639147718254149900114001439366210491848794252966385720",
    "39858600058283200146299133415042489499431054573404932156151",
    "39858314726612950724534622434403772129728029368131715714877",
    "39858286169503740923826896950187317245799849547558122609558",
    "39858276408677729749698717911855448472827317400409917977326",
    "39858243060539331898811962400296705038448168894703758602995",
    "39858241777926556492395816548983053377723377281202828488373",
    "39858176918275578217979477106787991446777655324771650049734",
    "39858091689962800436801129784417531503182127389277124418203",
    "39857395617666581960509463814828393896388244746728516404251",
    "39857278006606972215647578494121134854479474642371390377140",
    "39857090030017500130069695656390681864062467561534459892779",
    "39855527129597054908458870205246545162208212225022982978762",
    "39855416385126046711943538528284723591228412843693804937435",
    "39855414326198908095393400203061950732622678413072055143762",
    "39855216888336133046686419226012135188023846753376217405898",
    "39855213736511022306761066318958727530670312001401007125892",
    "39853129173234605165114426248127077326937244817972765635327",
    "39853126133807569503400141462720711177393606917549692520375",
    "39853098338695979006651396646231066300682692142860980305715",
    "39853097342394599041360168186353548824234560529110090795735",
    "39853079545127360889926860314379385356547541114101004847617",
    "39851852416423254098116672109066724021200938193907406780700",
    "39850497480879412922880110957195149365512534667413923412713",
    "39850208916533057855882255966007719714131218579813736362987",
    "39850194261425631370004012425227666023318067325834820979297",
    "39850193036369250660212887123156273401506225237207239485420",
    "39850075477046433144687998585556503039801631710071074920471",
    "39850002632911217680159691075652750846524771017662134206593",
    "39850000000977804567367090311988257353171555472713874362134",
    "39849999134209567163076506296689101169044122188262936883123",
    "39849998041772194631325782295234237350544068613604359774144",
    "39849851161407623853777855400028151629307427060616622925625",
    "39848808895510117521890043186784100247438650798642306244635",
    "39848808895510117521933164581821500801612005733512113987235",
    "39848786042580939489990894603487793017063202173112960950105",
    "39848778111077385494909202508720286051132398942710725482750",
    "39848676490119216806172119827321434360248161877158947263481",
    "39848676490119216806129790855645193369647924498598714508368",
    "39848676490119216806327628926995887617642619558498846167596",
    "39848669105459572769585919191277071671582082608292788047158",
    "39848669105459572769645682533917972068225759631646697996614",
    "39848660127480816608151007130290952312513860553408189219452",
    "39848651693588349456685229558205275822840347470561984888863",
    "39848643989396224368077441536444879778213367460213268422028",
    "39847977081203320021360210954726424446502984843720215912381",
    "39847957203528129553414242786958229693147147245946921740264",
    "39847609434011097321598776817442209253042586880356732782574",
    "39847605201696483598247920042252044710887596352770037094602",
    "39847594052804876821645607778057036572930981582492982728258",
    "39847593745317741875268868522697333367321866722361040337211",
    "39847593478232577095316001086769414885986979250638528466484",
    "39847593478232577095332041547139688631063659587998536290916",
    "39847593399121151819039623130823725126524710288135072002802",
    "39847582224020661149988761959384097115151128519030990016493",
    "39847430268789217042749331750566428434121277690411472740176",
    "39847280223635956236192626369896181409439600060849085216859",
    "39847150982024079310602373216597139084526446782086822771566",
    "39847037415748593396832687522994476696656463075768112348819",
    "39846948394572126821931588402121561889012389748349371995056",
    "39846860439638153754508291611298676709277813863708023915629",
    "39846856996316233698821572962371444811945889470991965657042",
    "39846852494671283071243756611573742376939061751066085709277",
    "39846844577366234431568842438343955747004306979603747902181",
    "39846840635152537179141740318576124906850908484887818204335",
    "39846838724652312275076125466705056195681154662472015689345",
    "39846836849588908123011944273745876056113478707081354432873",
    "39845877611897914034231690240722976070761327169934559416907",
    "39845877134246816113076193786827555346694473518948251604580",
    "39845828728927163934379006027816029311838526106503890772018",
    "39845819876948666279566344127589492117786456788135838628457",
    "39845817121971560556324359036391899523904438396905768849925",
    "39845816966523034210510291523359803253443983923481301922698",
    "39845816966523034210428794630318395308699001978273134759577",
    "39845787817047559382770499298366247614020175117479467073591",
    "39845786922532824005537259399185262324897552978016401093523",
    "39845786922532824005487019277833160737631518654750390934612",
    "39845786225153843988633719670106408016267727404385296897727",
    "39845786225153843988641865226725916563188227180612056399314",
    "39845786165230894211852321796664898002561440604088301680712",
    "39845783134635689573254341186345253128771181754449230520960",
    "39845759276831654686054300187584545771238152581420585507471",
    "39845759033394779934017308692653664616738034166563481790804",
    "39845633796415538643099520217765662041437188882163579743647",
    "39845633268248971104202735919771358845377763507319248600796",
    "39845624620864846845907309803935092205054406687824817074140",
    "39845614867691180281511076249677220129250725336418730035091",
    "39845591687828104572886195708282954734307604518078104601822",
    "39845591600218244414189688944547085256221888209393290867559",
    "39845590666118548971735825562970184992524230592831702276454",
    "39845590453514818335744913491190579399029709523188605433323",
    "39845590081642867415459997537317201629637531274213715813427",
    "39845590072319951682264318189651057356225113402109830251209",
    "39845589925425656683390441642264569782136239931597423104305",
    "39845589078207144550076940222302516456490212897974237030720",
    "39845572241256803911413424848123367023674256651553587152092",
    "39845497050464459385889137106890550962968910538846484179141",
    "39845495416781310662144644063263606186492733586609567715880",
    "39845478821225141116908136578994554424585808306343134548624",
    "39845478821225141116777229598381789591432556676628635512270",
    "39845478821225141116837797915496304713618210672793665479109",
    "39845478668338591281615246068509928336169954396066751819348",
    "39845478668338591281664773878031146812746453948389044023103",
    "39845478668338591281538541070041930475773441466459113527363",
    "39845475348795329496069786534002532093152076033194860663499",
    "39845475309332577514347964385342089796559556720638648133948",
    "39845475309332577514484742042173425713284907667198015451410",
    "39845475309332577514508733225111135603859317914867185674754",
    "39845319040086959122863635010983462803005249577836467917783",
    "39845318766126407696031039285450003347511325802801422838409",
    "39845317384428990591442618150760769849742817757623648335093",
    "39845317384428990591518765813749388689716623262770143986368",
    "39845312884439357377779158144643250986678961617049796178419",
    "39845201531037648139574192563288787643346284338010604046911",
    "39845201531037648139571055590398207297679662612089267165056",
    "39845167074721075164336839105588020635065297228494726145293",
    "39845166105909556196472012806456437491549373471346326461368",
    "39845163560613133233097587328274104396113604807751333109116",
    "39845093246319946609739439067400688038639777909800528708510",
    "39845071606799001755134045488225114473102924594753360330619",
    "39845065507535221523941319061748737580467683233542363819779",
    "39845011638606543562880213462535437941455787748255760883009",
    "39844598095871022214156288887278658551081710743080377953268",
    "39844597918850449819888616430392485673847785181066574372708",
    "39844547962031871573649742438327855049909576978585630423057",
    "39844546369601622550890630167881134696838752445040680086130",
    "39844539271733219089651253587186712462173290014258087247101",
    "39844530733747251364545406486472514745453148033214344358015",
    "39844525287249475869370312157065962700509610210407014797706",
    "39844523887090342250843280141934007036889625110154176223821",
    "39844501455672879094498833872630985588873817727442737131371",
    "39844498755928943335028700347246028096383650796783685444718",
    "39844498555520330609346056863811581765938934142607143018772",
    "39844456895893706649614668065547414208662682583221786295445",
    "39844452079807602001133680771727948574503630742782728517592",
    "39844450437411083812592511234374710321993953409720451133291",
    "39844422492375954292250005416558575364556721034399103257143",
    "39844420890854516579579839022030033912083674811084016317230",
    "39844417362041351760462691372150258446585898658718297842007",
    "39844417362041351760574680885200794513702004633833161929281",
    "39844415965294410563429175387836895401446821707642323172790",
    "39844388253372940135879976953524661365637564094205406696150",
    "39844387464253801242906519425679440226520292724268840556269",
    "39844378613923997680732432169970118734300476530229721562571",
    "39844301178425525174405021333227479528559634984512230998847",
    "39844298806328018201407090443054999501060879853390406303330",
    "39844295704383965480054068616669134710597550362621748593698",
    "39844292935758112372294023278175352620281270462175581081061",
    "39844286911648267174362803527023362847886900354037153569646",
    "39844221042435462125242240622928888632389375347377644205305",
    "39844180665364791272911181876792731298985508782328586867852",
    "39844106947877422496890829316764606057255181205399160934224",
    "39843936852424633932340377213355863945136222222281763348847",
    "39843924661707374257934669029007452754281395501242580229850",
    "39843920124979984020679909176222619853043512665368602466634",
    "39843913950334934959752547556873209369237656553704578533126",
    "39843900466971883817241707757585684363055135704776387645732",
    "39843884364002446380187259365053145376972373983870516285887",
    "39843865081973626046820971515744050297998073649832262253325",
    "39843846019630004182886909067737489257512943612080062388024",
    "39843796323755969022368277562012871929702812561969753177080",
    "39843770555993193625471839142738235993754350986221427653634",
    "39843746693139556401516286857497711882830079640107011443403",
    "39843731136320475747143497169902584706515618304673645995310",
    "39843712877047606581192027033687119683461121503277102307849",
    "39843711479048768450872313223600395404701132767436201560311",
    "39843707228934101323497113814646033419601227685139477066168",
    "39843706885762116737287481335909627132601705453742045800709",
    "39843704454018679845683518995594124104862877959373526834922",
    "39843703489891967624584893952495612962628433481051504237535",
    "39843681477235846137704499962531756807117581928437048458832",
    "39843677957332542649474594783665003528124109850647006773326",
    "39843676379162683549951468804410966513412375035959795862833",
    "39843672183964961819465991628820642632531371592390793532607",
    "39843669234444004846688067222979936277472074770606199429558",
    "39843667585415780277094443310799237921485807389997143586139",
    "39843667585415780318536697653274553017998654703105570307865",
    "39843667585415780441634045588017873813268150313234193065405",
    "39843667585415780335960073461890558388276349879695562583399",
    "39843667585415780327985001056417657024034826421741805101891",
    "39843667585415780276190764978100895124217834131542914516238",
    "39843667585415780254331579926406074585440373525201688863381",
    "39843667585415780254194535181941610566173416631664802065084",
    "39843667585415780254237739129438120386708824380826490642194",
    "39843667585415780254216733373796052521292208238504119666616",
    "39843667585415780254222117112320513428085925297512205112614",
    "39843667585415780254147168220744227889030788914418357980109",
    "39843667585415780254218318669296448657378666502616070502832",
    "39843667585415780254276318375650751008982750751598102905019",
    "39843667585415780254251819523714841562421501948889905559261",
    "39843667585415780254321423406181775865849709639182997957779",
    "39843667585415780254353419854717387749537643421779028109603",
    "39843667585415780254357084898305493096486850804270629367266",
    "39843667585415780254204749101247195156211061663669469900757",
    "39843667585415780254199583108376719521381460041690298575351",
    "39843667585415780254450654625882157056585116165540097598265",
    "39843667585415780254515564534711200128242493074093160802263",
    "39843667585415780254517599646870520021011484570390644199159",
    "39843667585415780254540076068203801667768849805429979689749",
    "39843667585415780254542111836194316175476361308034284994280",
    "39843667585415780254517292018211550496975110909548325499457",
    "39843667585415780254571539166586262905623391093787151463046",
    "39843667585415780254577950044450045254559004029370216886709",
    "39843667585415780254589504325776539354133836512176002814625",
    "39843667585415780254552810183396696971035856871918478266190",
    "39843667585415780254598064317994214559956289212208150740057",
    "39843667585415780254629642193693005893397466088759027271374",
    "39843667585415780254629013193748856465759051899441480838877",
    "39843667585415780254501411854465537716465253775997592598748",
    "39843667585415780254439598592235184947842781141036487564331",
    "39843667585415780254545701303716982338297901759621968410459",
    "39843667585415780254592352814692063789221660478614779795273",
    "39843667585415780254558956687092024517753107963504550984308",
    "39843667585415780254601468988483699790263519858911634395059",
    "39843667585415780254588277295695391266473538196845048506891",
    "39843667585415780254609083705992855772073885183060722192885",
    "39843667585415780254591090203919966328350939164130605928733",
    "39843667585415780254600543097674135026482038309163640116231",
    "39843667585415780254619676417553818320864085089300755219696",
    "39843667585415780254671136531445510181569059959752827628289",
    "39843667585415780254267985117881316978072865623377083848107",
    "39843667585415780254455726570225388138520563709056998447698",
    "39843667585415780254579830937732307849003951240110513551268",
    "39843667585415780254586233758788773337865681372473173627410",
    "39843667585415780254550517676137339775539860527308801625215",
    "39843667585415780254548531122047300287829915453117521457813",
    "39843667585415780254522424058795867192201956666406314968796",
    "39843667585415780254541431648740266891488113860398553460494",
    "39843667585415780254312139927578665774261388478381232075678",
    "39843667585415780254304554727623370848668054430067399971659",
    "39843667585415780254551347577322283425491266182553908992559",
    "39843667585415780254468369183170041073303589427749300734186",
    "39843667585415780254441059062094172454287038051752109337927",
    "39843667585415780254530512142508692121513018861598308896744",
    "39843667585415780254534004500024421478731991458968481717217",
    "39843667585415780254511550177686687971163997243269025725567",
    "39843667585415780254533840104054047351066574529569278529246",
    "39843667585415780254526481744132105223144998749457846355163",
    "39843667585415780254520099842051542654264177881515006241506",
    "39843667585415780254413266698847674680685197823872738368710",
    "39843667585415780254561742144104767425069084282800154633922",
    "39843667585415780254603768951599483401688745313036449271059",
    "39843667585415780254541238147762482790445655171123699589386",
    "39843667585415780254521919395629662536899783444526590955621",
    "39843667585415780254550409600863114627340141569108960682070",
    "39843667585415780254577522122947012896814501524521872014586",
    "39843667585415780254572476074374648851408493743237241276853",
    "39843667585415780254627611702582389444823718463714535614289",
    "39843667585415780254647197098103868992747490733184426608463",
    "39843667585415780254607572162844780553147450623700558787815",
    "39843667585415780254590007051187785300340769454744148218527",
    "39843667585415780254579206274963925126287739114038652259937",
    "39843667585415780254542179257216443323986456742125019766273",
    "39843667585415780254645740111880947017187674577725230917141",
    "39843667585415780254633734639175921459049100216540124774648",
    "39843667585415780254603372408455833766364566269639283359752",
    "39843667585415780254588548136624981393809838217758501564687",
    "39843667585415780254389421567626936813630968880746869460000",
    "39843667585415780254403512768523514404294771449879074411578",
    "39843667585415780254308627729597877842924155030115251937963",
    "39843667585415780254287726723557937147350274330792744422243",
    "39843667585415780254357484097815492963622185677442758146706",
    "39843667585415780254379566099090266899409264321476727208540",
    "39843667585415780254351025332540158230036527916423172352716",
    "39843667585415780254566282984660822473901724316446522109638",
    "39843667585415780254562393666241201952331686920761369722886",
    "39843667585415780254612952032323920987772493907283379239309",
    "39843667585415780254618020467598426647811651022859899705571",
    "39843667585415780254655726820443758032172078276172978590724",
    "39843667585415780254637931324544346965510357720118534731321",
    "39843667585415780254589528830229033130045273556953374957529",
    "39843667585415780254621039288260120433002919204173393774490",
    "39843667585415780254715649326741569291136769882080323596183",
    "39843667585415780254714927603425014808261516902294514679556",
    "39843667585415780254774497697444473417222237422324280679486",
    "39843667585415780254773634583962981380349907661877168483823",
    "39843667585415780254343014215930680622160320858954751753637",
    "39843667585415780254309712835021209926514194817977577169729",
    "39843667585415780254228686994435240269697891478723768208229",
    "39843667585415780254237877951278550139860927697980183865033",
    "39843667585415780254255079931993385132544595683104938514431",
    "39843667585415780254259410158643564370371358435240733660850",
    "39843667585415780254341446181565500618921008925190049154155",
    "39843667585415780254275086765649092137077053573962008960992",
    "39843667585415780254313376578748265078157488242481163706154",
    "39843667585415780254307313493093358661321075296523400485299",
    "39843667585415780254335616745628583642697810291237532031434",
    "39843667585415780254329498258517762770870337968752389929901",
    "39843667585415780254383661152432108661966661823557324071095",
    "39843667585415780254371113436150807864472261541945856215489",
    "39843667585415780254295230251369992668648887569988387513119",
    "39843667585415780254416092530731024868707947855342239068475",
    "39843667585415780254351965227248484526648676109387801187067",
    "39843667585415780253667975776286640551645366929686966651467",
    "39843667585415780254541572176796653467520099369842913175594",
    "39843667585415780254583641684513037640145778886805418906513",
    "39843667585415780254585565324068821197888213566540386452299",
    "39843667585415780254540205675330442101583934687947263668166",
    "39843667585415780254548524081222879934419550490196986987685",
    "39843667585415780254522029365877943519680226269704333316962",
    "39843667585415780254610729276549212157641444158497253951535",
    "39843667585415780254580938940603875325934776664592066225208",
    "39843667585415780254649126380360726464040071636891632708368",
    "39843667585415780254672286452581692605256018296504387329148",
    "39843667585415780255326404752588714129670723087344969865668",
    "39843667585415780255314246639602239397247937517376690512458",
    "39843667585415780255352826592217652730123477292827069009938",
    "39843667585415780255356766281570257914750148849525177137874",
    "39843667585415780255387540302860992084918467516987394710926",
    "39843667585415780255330192622770971433681242371069917881118",
    "39843667585415780255412170998001969497068836920857472103812",
    "39843667585415780255144337548076538760700887571267813547044",
    "39843667585415780255192773526056730256577294554037964996186",
    "39843667585415780255144224099552349977284140349653969851828",
    "39843667585415780255166570652630675644792293933873831455637",
    "39843667585415780255242534902234302401436893506548086572801",
    "39843667585415780255219626623151323116970256917683918528514",
    "39843667585415780255483856779988413886621572171150521032751",
    "39843667585415780255528332941864496939332453834787669805422",
    "39843667585415780255459694727507565528474372889680262946080",
    "39843667585415780255497213455869845843240050930075432633829",
    "39843667585415780255431538783530728842451223766935175613881",
    "39843667585415780255562537128007938762105100705038115297115",
    "39843667585415780255603729162834353885691466285252451517973",
    "39843667585415780255579147089433926118860728688056778402276",
    "39843667585415780255624361403838986124768682676762040546192",
    "39843667585415780255569145442630243931246151342921597690080",
    "39843667585415780255573237570396772694762431478539921552963",
    "39843667585415780255578030802972190603897007200042255197399",
    "39843667585415780255617846541370958405576081377718421360680",
    "39843667585415780255674948029341868902222549717145022596112",
    "39843667585415780255655693519736554817930177623898111268013",
    "39843667585415780255677649105524226672316440930074278409466",
    "39843667585415780255603220935902419317485248298783017784936",
    "39843667585415780255532762149987813680720597734331794715362",
    "39843667585415780255602684026380345768525070993811406573344",
    "39843667585415780255497414023677839479098492865130906328482",
    "39843667585415780255549813516897630561330384913195739388012",
    "39843667585415780255541407718017561271068576494175559408989",
    "39843667585415780255549046433134312917513993666566436988767",
    "39843667585415780255379576577316681646314200724715479163708",
    "39843667585415780255296238213277866185966434596089469919920",
    "39843667585415780255311111496512282722812702780333728860045",
    "39843667585415780255409924891150715237337966735914022694777",
    "39843667585415780255492106737413042259465276727792455840163",
    "39843667585415780255462520862545556159199609697559098873640",
    "39843667585415780255473032781075677159975193194285043545671",
    "39843667585415780255513964575369941653127540067652352373511",
    "39843667585415780255279697252324198502930055469146436651800",
    "39843667585415780255457137781533798985280048468598797287973",
    "39843667585415780255402657597427748642105703049031008861441",
    "39843667585415780255392202855634731474360085302252423259698",
    "39843667585415780255371827166158152297969022337982556276095",
    "39843667585415780255357796583554197453121070626653481601252",
    "39843667585415780255061361216035139975976606187223536754204",
    "39843667585415780255192967476907574836809269446591040074522",
    "39843667585415780255256858200204331825179775308722251262140",
    "39843667585415780255216313147042871640286285496314190043237",
    "39843667585415780255267560679116780325230497863856637124122",
    "39843667585415780255190098492680373157087310870549638011980",
    "39843667585415780255185855446299612490092039648510338011640",
    "39843667585415780255169435359119338060622267520758536243428",
    "39843667585415780254911590548171710082286956395590945063979",
    "39843667585415780255214933028401031386861733056350496329570",
    "39843667585415780255197497291571315219738074427489510596393",
    "39843667585415780255179826784151796989390292085650948963266",
    "39843667585415780255233384363730840076309755617964431409082",
    "39843667585415780255270645157502775957700969015142250856894",
    "39843667585415780255237221324476132336566404558555694885190",
    "39843667585415780255174245621605098408051661549284096895035",
    "39843667585415780255268819833330647485059493132587911381475",
    "39843667585415780255223746923935649894891307657995486737004",
    "39843667585415780255248433890920357775357284762054472317270",
    "39843667585415780255046837573701669784727845206954852159668",
    "39843667585415780255274473794321790508216151087650668686584",
    "39843667585415780255263863552249074085482583945078681728537",
    "39843667585415780255210035028304014285926494525348933222079",
    "39843667585415780255200711208223687689855891828967703116348",
    "39843667585415780255218123606625959446095274047508840886219",
    "39843667585415780255194910662165520402095565004468448284568",
    "39843667585415780255220073984669200404232752983087622516846",
    "39843667585415780255293438232018710211462869591929788687827",
    "39843667585415780255292054601663556639931797515436194049928",
    "39843667585415780255288694725431531183270348544540871348764",
    "39843667585415780255346475132296306287399540787621048556099",
    "39843667585415780255367289989931282772730715737646653818733",
    "39843667585415780255334910408205804250832887894737458577464",
    "39843667585415780255339477850834557129545683662209246001591",
    "39843667585415780255313793589168472455333365127354841876139",
    "39843667585415780255150019147696881853789681270613947719611",
    "39843667585415780255304953747287523376722891317473729928880",
    "39843667585415780255323963919882053259470727051617616467739",
    "39843667585415780255347329843825659795024409753823797385897",
    "39843667585415780255351466869222203862440626287861108675128",
    "39843667585415780255379212805257058288308158300019667963776",
    "39843667585415780255419175084476459834024612126836028644676",
    "39843667585415780255412893613971537063977096508355895763165",
    "39843667585415780255350373492783240075591798826658045449421",
    "39843667585415780255340430409366057099690832137475207460265",
    "39843667585415780255291968727032854868596454978464989871885",
    "39843667585415780255337519446641399498866593707193217839339",
    "39843667585415780255276732905525610903711198688868465858641",
    "39843667585415780255090618561909697073959077940658186052424",
    "39843667585415780255324576633921346938341114174398519892191",
    "39843667585415780255286951763895073730346387713007632275005",
    "39843667585415780255293226541028316196825602756706363844322",
    "39843667585415780255249630193888788225028447297963275819866",
    "39843667585415780255249582373264480576699126329006055788008",
    "39843667585415780255218244211139333599688092695043021386143",
    "39843667585415780255236203543048508688489043679827497083837",
    "39843667585415780255181575317646745878715327773679688537779",
    "39843667585415780254908324176748457092058769116933140791991",
    "39843667585415780254806640882952038134213925276440202883041",
    "39843667585415780254955231665222997284621173845884730714914",
    "39843667585415780255078734626485005756500757611980538426217",
    "39843667585415780255027849209261944631410256014620453821504",
    "39843667585415780254993640918248871866017073321011814163358",
    "39843667585415780254844992998928639256794772371525448440076",
    "39843667585415780254911046931627583694097589973344942276924",
    "39843667585415780254882860732239113852276355201617348832071",
    "39843667585415780254783661902246151503082627431224958127005",
    "39843667585415780254806213605847718059533884684898401096471",
    "39843667585415780254821431540070927412649068840488294496966"
]

const TEST_CONTEXT = {
    "contract": {
        "Data": {
            "allocatedSupply": "63431778720420062441",
            "currentDay": 598,
            "globals": {
                "lockedHeartsTotal": "6059686019567191484",
                "nextStakeSharesTotal": "7694255870687737",
                "shareRate": "182950",
                "stakePenaltyTotal": "10698862264333",
                "dailyDataCount": "598",
                "stakeSharesTotal": "10946526209668167423",
                "latestStakeId": "404320",
                "claimStats": {
                    "claimedBtcAddrCount": "30716",
                    "claimedSatoshisTotal": "25673397100358",
                    "unclaimedSatoshisTotal": "1786651846416372"
                }
            }
        }
    }
}

const TEST_STAKE_DATA = {
    "stakeOwner": "0xd30542151ea34007c4c4ba9d653f4dc4707ad2d2",
    "stakeIndex": 0,
    "stakeId": 128500,
    "lockedDay": 142,
    "stakedDays": 3641,
    "stakedHearts": BigNumber("20896950110764"),
    "stakeShares": BigNumber("61245908277439"),
    "unlockedDay": 0,
    "isAutoStake": false,
    "progress": 12524,
    "bigPayDay": BigNumber(0),
    "payout": BigNumber(0)
}

describe('Stake Interest (Yield) / Peanalty Calcs', () => {
    test('calcPayoutRewards produces correct results for { payout, bigPayDay }', () => {
        const result = calcPayoutRewards({ 
            context: TEST_CONTEXT,
            stakeData: TEST_STAKE_DATA,
            dailyData: TEST_DAILY_DATA,
            fromDay: 0,
            toDay: TEST_DAILY_DATA.length
        })
        expect(result.payout.toString(10)).toEqual("13429102854384")
        expect(result.bigPayDay.toString(10)).toEqual("22303667141244")
    })

    test('EARLY BEFORE HALF TERM END STAKE: calcPayoutBpdPenalty produces correct results for { payout, bigPayDay, penaly }', () => {
        const result = calcPayoutBpdPenalty(TEST_CONTEXT, TEST_STAKE_DATA, TEST_DAILY_DATA)
        expect(result.payout.toString(10)).toEqual("13429102854384")
        expect(result.bigPayDay.toString(10)).toEqual("22303667141244")
        expect(result.penalty.toString(10)).toEqual("56629720106392")
    })

    // NOTE: The following 3 tests do not have daily data beyond test authoring day 598. 
    //       This does not affect their accuracy.
    test('RIGHT ON TIME END STAKE: calcPayoutBpdPenalty produces correct results for { payout, bigPayDay, penaly }', () => {
        const _TEST_CONTEXT = { ...TEST_CONTEXT }
        _TEST_CONTEXT.contract.Data.currentDay = TEST_STAKE_DATA.lockedDay + TEST_STAKE_DATA.stakedDays + 1
        const result = calcPayoutBpdPenalty(_TEST_CONTEXT, TEST_STAKE_DATA, TEST_DAILY_DATA)
        expect(result.payout.toString(10)).toEqual("13429102854384")
        expect(result.bigPayDay.toString(10)).toEqual("22303667141244")
        expect(result.penalty.toString(10)).toEqual("0")
    })

    test('EARLY AFTER HALF TERM END STAKE: calcPayoutBpdPenalty produces correct results for { payout, bigPayDay, penaly }', () => {
        const _TEST_CONTEXT = { ...TEST_CONTEXT }
        _TEST_CONTEXT.contract.Data.currentDay = TEST_STAKE_DATA.lockedDay + Math.ceil(TEST_STAKE_DATA.stakedDays / 2) + 5
        const result = calcPayoutBpdPenalty(_TEST_CONTEXT, TEST_STAKE_DATA, TEST_DAILY_DATA)
        expect(result.payout.toString(10)).toEqual("70662996164")
        expect(result.bigPayDay.toString(10)).toEqual("22303667141244")
        expect(result.penalty.toString(10)).toEqual("22338998639326")
    })

    test('WITHIN GRACE PERIOD END STAKE: calcPayoutBpdPenalty produces correct results for { payout, bigPayDay, penaly }', () => {
        const _TEST_CONTEXT = { ...TEST_CONTEXT }
        _TEST_CONTEXT.contract.Data.currentDay = TEST_STAKE_DATA.lockedDay + TEST_STAKE_DATA.stakedDays + HEX.LATE_PENALTY_GRACE_DAYS
        const result = calcPayoutBpdPenalty(_TEST_CONTEXT, TEST_STAKE_DATA, TEST_DAILY_DATA)
        expect(result.payout.toString(10)).toEqual("13429102854384")
        expect(result.bigPayDay.toString(10)).toEqual("22303667141244")
        expect(result.penalty.toString(10)).toEqual("0")
    })

    test('BEYOND GRACE PERIOD END STAKE: calcPayoutBpdPenalty produces correct results for { payout, bigPayDay, penaly }', () => {
        const _TEST_CONTEXT = { ...TEST_CONTEXT }
        _TEST_CONTEXT.contract.Data.currentDay = TEST_STAKE_DATA.lockedDay + TEST_STAKE_DATA.stakedDays + HEX.LATE_PENALTY_GRACE_DAYS + 5
        const result = calcPayoutBpdPenalty(_TEST_CONTEXT, TEST_STAKE_DATA, TEST_DAILY_DATA)
        expect(result.payout.toString(10)).toEqual("13429102854384")
        expect(result.bigPayDay.toString(10)).toEqual("22303667141244")
        expect(result.penalty.toString(10)).toEqual("404498000759")
    })

})
